938. 二叉搜索树的范围和
给定二叉搜索树的根结点 root，返回 L 和 R（含）之间的所有结点的值的和。

二叉搜索树保证具有唯一的值。

 

示例 1：

输入：root = [10,5,15,3,7,null,18], L = 7, R = 15
输出：32
示例 2：

输入：root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
输出：23
 

提示：

树中的结点数量最多为 10000 个。
最终的答案保证小于 2^31。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        if (root == NULL) return 0;
        else if (root->val < L)
            return rangeSumBST(root->right, L, R);
        else if (root->val > R)
            return rangeSumBST(root->left, L, R);
        return root->val + rangeSumBST(root->left, L, R) + rangeSumBST(root->right,L,R);
    }

    //迭代
    // int rangeSumBST(TreeNode* root, int L, int R) {
    //     int sum = 0;
    //     TreeNode* r;
    //     queue <TreeNode*> q;
    //     q.push(root);
    //     while(!q.empty())
    //     {
    //         //取结点
    //         r = q.front(); q.pop();
            
    //         //判断
    //         if (r == NULL) continue;
    //         if (r->val >= L && r->val <= R)
    //             sum += r->val;
            
    //         //入结点
    //         if (r->val > L)
    //             q.push(r->left);
    //         if (r->val < R)
    //             q.push(r->right);
    //     }
    //     return sum;
    // }
};
