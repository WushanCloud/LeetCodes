请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：

假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/string-to-integer-atoi
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


int myAtoi(char * str){
    int index = 0;//下标
    long ans = 0;//答案
    int symbol = 1;//1表示正
    //int right = 0;//判断有效
    //找到第一个非空位
    while(str[index] != '\0' && str[index] == ' ')
    {
        index ++;
    }
    //判断符号位
    if(str[index] != '\0' && str[index] == '-' || str[index] == '+')
    {
        if (str[index] == '-')
            symbol = -1;
        index++;
    }
    //去掉首位是0的情况
    while(str[index] != '\0' && str[index] == '0')
    {
        index++;
    }
    //判断是否是数字位，进行转换
    //设置位数计数器
    int num = 0;
    while(str[index] != '\0' && str[index] >= '0'&& str[index] <= '9'&& num <= 10)
    {
        ans = ans*10 + str[index] - '0';
        num++;
        index++;
    }
    if((symbol * ans) > (long)INT_MAX)
    {
        return INT_MAX;
    }
    if((symbol * ans) < (long)INT_MIN)
    {
        return INT_MIN;
    }
    return (int)(ans * symbol);
}




// int myarr(int* arr, int n)
//     {
//         long long ans = 0;
//         int i = 1;
//         while (i < n)
//         {
//             ans = ans *10 + arr[i];
//             i++;
//         }
//         if (arr[0] == '-')
//             ans = -ans;
//         if (ans > INT_MAX)
//         {
//             return INT_MAX;
//         }
//         if(ans < INT_MIN)
//         {
//             return INT_MIN;
//         }
//         return ans;
//     }

//     int myAtoi(char* str) {

//         int* arr = (int*)malloc(4 * 20);
//         char* p = str;
//         int i = 0;
//         while (*p != '\0' && *p == ' ') ++p;
//         arr[i] = '+';
//         if (*p != '\0' && (*p == '-' || *p == '+'))
//         {
//             arr[i] = *p;
//             ++p;
//         }i++;
//         while (*p == '0')++p;
//         while (*p != '\0' && i <= 11)
//         {
//             if (*p >= '0' && *p <= '9')
//             {
//                 arr[i] = *p - '0';
//                 i++;
//                 ++p;
//             }
//             else
//                 break;
//         }
//         int ans = myarr(arr, i);

//         return ans;
//     }