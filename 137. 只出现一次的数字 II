给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,3,2]
输出: 3
示例 2:

输入: [0,1,0,1,0,1,99]
输出: 99

class Solution {
public:
    //法一：
    // int singleNumber(vector<int>& nums) {
    //     int arr[32] = { 0 };
    //     for (int i = 0; i < nums.size(); i++)
    //     {
    //         for (int j = 0; nums[i] && j < 32; j++)
    //         {
    //             if (nums[i] & 1)
    //             {
    //                 arr[j]++;
    //             }
    //             nums[i] >>= 1;
    //         }
    //     }
    //     int ans = 0;
    //     for (int i = 31; i >= 0; i--)
    //     {
    //         ans <<= 1;
    //         ans |= (arr[i] % 3);
    //     }
    //     return ans;
    // }
    //法二：
    int singleNumber(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int i = 0;
        for (; (i + 2) < nums.size() && (nums[i] == nums[i + 1]); i += 3);
        return nums[i];
    }
};
