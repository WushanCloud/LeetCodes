根据逆波兰表示法，求表达式的值。

有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

说明：

整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。

示例 1：

输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: ((2 + 1) * 3) = 9
示例 2：

输入: ["4", "13", "5", "/", "+"]
输出: 6
解释: (4 + (13 / 5)) = 6
示例 3：

输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
输出: 22
解释: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//字符串转int
int change(char* s)
{
    int len = strlen(s); int sum = 0; int temp = 1;
    while (len--)
    {
        if (s[len] == '-')
            return -sum;
        sum += (s[len] - '0') * temp;
        temp *= 10;
    }
    return sum;

}

//二元运算
int eryuan(int a, int b, char* yunsuanfu)
{
    if (!strcmp(yunsuanfu, "+"))
    {
        return a + b;
    }
    else if (!strcmp(yunsuanfu, "-"))
    {
        return a - b;
    }
    else if (!strcmp(yunsuanfu, "*"))
    {
        return a * b;
    }
    else if (!strcmp(yunsuanfu, "/"))
    {
        return a / b;
    }
    return 0;
}

//移动后面的字符数组
void m_move(char **tokens, int i, int tokenSize)
{
    //将k+2的元素挪动到k的位置上
    int k;
    for (k = i; k + 2 < tokenSize; k++)
    {
        memcpy(tokens[k], tokens[k + 2], strlen(tokens[k + 2])+1);
    }
}
//求出数字的长度


char arr[10];

//把数字放回数组
void array(int ans)
{
    int num1 = abs(ans); int len = 0;
    while (num1)
    {
        num1 /= 10;
        len++;
    }

    int nums2 = abs(ans);
    if (ans < 0)
    {
        arr[0] = '-';
        len++;
        arr[len] = '\0';
    }
    else arr[len] = '\0';

    while (nums2)
    {
        arr[len - 1] = nums2 % 10 + '0';
        nums2 /= 10;
        len--;
    }

 }



int evalRPN(char **tokens, int tokensSize)
{
    char** brr = (char**)malloc(sizeof(char*) * tokensSize);
    for (int i = 0; i < tokensSize; i++)
    {
        brr[i] = (char*)malloc(sizeof(char) * 20);
        strcpy(brr[i], tokens[i]);
    }

    int left = 0; int right = 0; int ans = 0;
    int i = 0;
    for (; i < tokensSize; i++)
    {
        if (!strcmp(brr[i], "+") || !strcmp(brr[i], "-") || !strcmp(brr[i], "*") || !strcmp(brr[i], "/"))

        {
            //进行二元运算
            left = change(brr[i - 2]);
            right = change(brr[i - 1]);

            ans = eryuan(left, right, brr[i]);
            //将i-2的位置存放答案  比如  12 3 + 5 * 变成 15 5 *
            //此时tokensSize的大小是会改变的
            //将ans的位置用“A”代替，就不用再将ans存入数组中
            array(ans);
            memcpy(brr[i - 2], arr, strlen(arr) + 1);
            //将数组后面的先前移动
            m_move(brr, i - 1, tokensSize);
            //没进行一次运算tokensize-2;
            tokensSize -= 2;
            i = 0;
        }
    }
    return change(brr[0]);
}