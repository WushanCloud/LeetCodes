101. 对称二叉树
给定一个二叉树，检查它是否是镜像对称的。

 

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
 

进阶：

你可以运用递归和迭代两种方法解决这个问题吗？

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//  class Solution {
// public:
//     bool check(TreeNode *u, TreeNode *v) {
//         queue <TreeNode*> q;
//         q.push(u); q.push(v);
//         while (!q.empty()) {
//             u = q.front(); q.pop();
//             v = q.front(); q.pop();
//             if (!u && !v) continue;
//             if ((!u || !v) || (u->val != v->val)) return false;

//             q.push(u->left); 
//             q.push(v->right);

//             q.push(u->right); 
//             q.push(v->left);
//         }
//         return true;
//     }

//     bool isSymmetric(TreeNode* root) {
//         return check(root, root);
//     }
// };

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root == NULL) return true;
        queue<TreeNode*> q;
        TreeNode* r1,* r2;
        q.push(root);q.push(root);
        while(!q.empty())//层序的方法
        {
            //取结点比较
            r1 = q.front(); q.pop();
            r2 = q.front(); q.pop();
            if (r1 == NULL && r2 == NULL)
                continue;
            else if ((r1 == NULL || r2 == NULL) || r1->val != r2->val)
                return  false;
            
            //放结点
            q.push(r1->left);
            q.push(r2->right);

            q.push(r1->right);
            q.push(r2->left);
        }
        return true;
    }
};
// class Solution {
// public:
//     bool istrue(TreeNode* root1, TreeNode* root2){
//         if (root1 == NULL && root2 == NULL)
//             return true;
//         else if (root1 == NULL || root2 == NULL)
//             return false;
//         return (root1->val == root2->val) && istrue(root1->left, root2->right) && istrue(root1->right, root2->left);
//     }
//     bool isSymmetric(TreeNode* root) {
//         return istrue(root, root);
//     }
// };
